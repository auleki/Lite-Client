import { app, BrowserWindow, ipcMain, nativeImage } from 'electron';
import path from 'path';
import {
  IpcChannel,
  IpcMainChannel,
  OllamaChannel,
  InferenceChannel,
  MorpheusChannel,
  ChatChannel,
} from '../events';
import {
  initOllama,
  getAllModels,
  askOlama,
  getModel,
  setModelFolderPath,
  getModelsFolderPath,
  stopOllamaServe,
  getAvailableModelsFromRegistryHandler,
  checkDiskSpaceForModelHandler,
  getDiskSpaceInfoHandler,
  getCurrentModelHandler,
  saveLastUsedLocalModelHandler,
  getLastUsedLocalModelHandler,
  deleteModelHandler,
  pullAndReplaceModelHandler,

  // New inference management handlers
  getInferenceModeHandler,
  setInferenceModeHandler,
  getMorpheusConfigHandler,
  setMorpheusConfigHandler,
  testMorpheusConnectionHandler,
  getMorpheusModelsHandler,
  askMorpheusHandler,
  askAIHandler,
  getAvailableInferenceModelsHandler,
  // Chat management handlers
  createChatHandler,
  getChatsHandler,
  getChatHandler,
  getCurrentChatHandler,
  switchToChatHandler,
  deleteChatHandler,
  sendChatMessageHandler,
  updateChatTitleHandler,
  migrateChatHandler,
  getModelInfoHandler,
  getLocalModelInfoHandler,
} from './handlers';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = async (): Promise<void> => {
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    title: 'Morpheus', // Set window title
    autoHideMenuBar: true,
    frame: false,
    resizable: isDev,
    fullscreenable: false,
    show: true,
    movable: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools();
  }
};

// **ðŸ”§ LATEST ELECTRON QUIT HANDLING (2024/2025)**
// Graceful shutdown handlers for proper app termination

// 1. Handle app quit attempts
app.on('before-quit', (event) => {
  console.log('ðŸ”„ App is preparing to quit...');

  // Force close all windows immediately
  BrowserWindow.getAllWindows().forEach((win) => {
    if (!win.isDestroyed()) {
      win.destroy(); // Force destroy instead of close()
    }
  });

  console.log('âœ… All windows closed gracefully');
});

// 2. Handle all windows closed (important for cross-platform)
app.on('window-all-closed', () => {
  // Quit on ALL platforms (including macOS) for development
  console.log('ðŸšª All windows closed - quitting app');
  app.quit();
});

// 3. Handle SIGINT (Ctrl+C) and SIGTERM signals for development
process.on('SIGINT', () => {
  console.log('ðŸ“¡ SIGINT received - initiating graceful shutdown');
  app.quit();
});

process.on('SIGTERM', () => {
  console.log('ðŸ“¡ SIGTERM received - initiating graceful shutdown');
  app.quit();
});

// 4. Handle uncaught exceptions to prevent hanging
process.on('uncaughtException', (error) => {
  console.error('ðŸ’¥ Uncaught exception:', error);
  app.quit();
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('ðŸ’¥ Unhandled rejection at:', promise, 'reason:', reason);
  app.quit();
});

app.on('ready', async () => {
  // Set dock icon for macOS
  if (process.platform === 'darwin') {
    const iconPath = isDev
      ? path.join(
          __dirname,
          '../../src/frontend/assets/images/MOR_logo-sq.iconset/icon_128x128.png',
        )
      : path.join(
          process.resourcesPath,
          'app',
          'src/frontend/assets/images/MOR_logo-sq.iconset/icon_128x128.png',
        );

    try {
      if (app.dock) {
        const iconImage = nativeImage.createFromPath(iconPath);
        if (!iconImage.isEmpty()) {
          await app.dock.setIcon(iconImage);
        }
      }
    } catch (error) {
      console.error('Failed to set dock icon:', error);
    }
  }

  await createWindow();

  ipcMain.on(IpcMainChannel.CommandOuput, (_, output: string) => {
    console.log(output);
  });

  ipcMain.handle(OllamaChannel.OllamaInit, initOllama);
  ipcMain.handle(OllamaChannel.OllamaGetAllModels, getAllModels);
  ipcMain.handle(OllamaChannel.OllamaQuestion, askOlama);
  ipcMain.handle(OllamaChannel.OllamaGetModel, getModel);
  ipcMain.handle(
    OllamaChannel.OllamaGetAvailableModelsFromRegistry,
    getAvailableModelsFromRegistryHandler,
  );
  // Cache-related handlers removed - models are always fetched fresh
  ipcMain.handle(OllamaChannel.OllamaCheckDiskSpaceForModel, checkDiskSpaceForModelHandler);
  ipcMain.handle(OllamaChannel.OllamaGetDiskSpaceInfo, getDiskSpaceInfoHandler);
  ipcMain.handle(OllamaChannel.OllamaGetCurrentModel, getCurrentModelHandler);
  ipcMain.handle(OllamaChannel.OllamaSaveLastUsedLocalModel, saveLastUsedLocalModelHandler);
  ipcMain.handle(OllamaChannel.OllamaGetLastUsedLocalModel, getLastUsedLocalModelHandler);
  ipcMain.handle(OllamaChannel.OllamaDeleteModel, deleteModelHandler);
  ipcMain.handle(OllamaChannel.OllamaPullAndReplaceModel, pullAndReplaceModelHandler);

  ipcMain.handle(OllamaChannel.OllamaGetModelInfo, getModelInfoHandler);
  ipcMain.handle(OllamaChannel.OllamaGetLocalModelInfo, getLocalModelInfoHandler);

  // Inference Management Handlers
  ipcMain.handle(InferenceChannel.GetInferenceMode, getInferenceModeHandler);
  ipcMain.handle(InferenceChannel.SetInferenceMode, setInferenceModeHandler);
  ipcMain.handle(InferenceChannel.GetMorpheusConfig, getMorpheusConfigHandler);
  ipcMain.handle(InferenceChannel.SetMorpheusConfig, setMorpheusConfigHandler);
  ipcMain.handle(InferenceChannel.TestMorpheusConnection, testMorpheusConnectionHandler);

  // Morpheus API Handlers
  ipcMain.handle(MorpheusChannel.MorpheusGetModels, getMorpheusModelsHandler);
  ipcMain.handle(MorpheusChannel.MorpheusQuestion, askMorpheusHandler);

  // Unified AI Handlers
  ipcMain.handle('ai:ask', askAIHandler);
  ipcMain.handle('ai:getmodels', getAvailableInferenceModelsHandler);

  // Chat Management Handlers
  ipcMain.handle(ChatChannel.CreateChat, createChatHandler);
  ipcMain.handle(ChatChannel.GetChats, getChatsHandler);
  ipcMain.handle(ChatChannel.GetChat, getChatHandler);
  ipcMain.handle(ChatChannel.GetCurrentChat, getCurrentChatHandler);
  ipcMain.handle(ChatChannel.SwitchToChat, switchToChatHandler);
  ipcMain.handle(ChatChannel.DeleteChat, deleteChatHandler);
  ipcMain.handle(ChatChannel.SendMessage, sendChatMessageHandler);
  ipcMain.handle(ChatChannel.UpdateTitle, updateChatTitleHandler);
  ipcMain.handle(ChatChannel.MigrateChat, migrateChatHandler);

  ipcMain.on(IpcChannel.Close, () => app.quit());
  ipcMain.on(IpcChannel.Minimize, () => mainWindow.minimize());
  ipcMain.handle(IpcChannel.GetModelsPath, getModelsFolderPath);
  ipcMain.handle(IpcChannel.SetFolderPath, setModelFolderPath);
});

app.on('window-all-closed', async () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('before-quit', async () => {
  // shutdown ollama
  await stopOllamaServe();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

export const sendOllamaStatusToRenderer = async (status: string) => {
  mainWindow.webContents.send(OllamaChannel.OllamaStatusUpdate, status);
};

export const isDev = !app.isPackaged;
export const appPath = path.parse(app.getPath('exe')).dir;
